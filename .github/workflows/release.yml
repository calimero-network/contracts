name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - Cargo.toml
      - Cargo.lock
      - "contracts/**"
      - .github/workflows/release.yml
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master
    paths:
      - Cargo.toml
      - Cargo.lock
      - "contracts/**"
      - .github/workflows/release.yml

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      rust_protocol_matrix: ${{ steps.setup_matrix.outputs.rust_protocol_matrix }}
      solidity_protocol_matrix: ${{ steps.setup_matrix.outputs.solidity_protocol_matrix }}
      version: ${{ steps.version_info.outputs.version }}
      release_required: ${{ steps.version_info.outputs.release_required }}
      build_required: ${{ steps.version_info.outputs.build_required }}
      target_commit: ${{ steps.version_info.outputs.target_commit }}
      prerelease: ${{ steps.version_info.outputs.prerelease }}
      overwrite_release: ${{ steps.version_info.outputs.overwrite_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup matrix
        id: setup_matrix
        run: |
          echo 'rust_protocol_matrix=["icp", "near", "stellar"]' >> "$GITHUB_OUTPUT"
          echo 'solidity_protocol_matrix=["ethereum", "zksync"]' >> "$GITHUB_OUTPUT"

      - name: Get version info
        id: version_info
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Validating contract versions"

          version_candidate=""
          for protocol in $(echo '${{ steps.setup_matrix.outputs.rust_protocol_matrix }}' | jq -r '.[]'); do
            for contract in "contracts/${protocol}"/*; do
              if [ -d "${contract}" ]; then
                contract_version=$(cargo pkgid --manifest-path "${contract}/Cargo.toml" | awk -F'[#@]' '{print $NF}')
                echo "  contract: $contract, version: $contract_version"

                if [ -z "$version_candidate" ]; then
                  version_candidate="$contract_version"
                elif [ "$version_candidate" != "$contract_version" ]; then
                  echo "Version mismatch between contracts"
                  echo "Make sure all contracts have the same version"
                  echo "All contract protocols:"
                  echo "  - rust_protocol_matrix: '${{ steps.setup_matrix.outputs.rust_protocol_matrix }}'"
                  exit 1
                fi
              fi
            done
          done
          echo "Valid version candidate: $version_candidate"

          echo "target_commit=${{ github.sha }}" >> $GITHUB_OUTPUT

          if [ "${{ github.ref }}" == "refs/heads/master" ]; then
            version="$version_candidate"
            echo "Master version: $version"

            if gh release view "$version" --repo ${{ github.repository }} >/dev/null 2>&1; then
              echo "Master release for this version already exists"
              echo "release_required=false" >> $GITHUB_OUTPUT
            else
              echo "New master release required"
              echo "release_required=true" >> $GITHUB_OUTPUT
            fi

            echo "build_required=true" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "overwrite_release=false">> $GITHUB_OUTPUT
            echo "version=$version" >> $GITHUB_OUTPUT

          elif [ "${{ github.event_name }}" == "pull_request" ] && [[ "${{ github.head_ref }}" =~ ^(pre)?release/.* ]]; then
            version="prerelease-${{ github.event.number }}"
            echo "Prerelease version: $version"

            echo "build_required=true" >> $GITHUB_OUTPUT
            echo "release_required=true" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "overwrite_release=true">> $GITHUB_OUTPUT
            echo "version=$version" >> $GITHUB_OUTPUT

          else
            echo "This is not a master branch or a release PR"
            echo "build_required=false" >> $GITHUB_OUTPUT
            echo "release_required=false" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "overwrite_release=false" >> $GITHUB_OUTPUT
            echo "version=dev-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

  build-rust:
    name: Build Rust
    if: needs.prepare.outputs.build_required == 'true'
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup rust toolchain
        run: |
          rustup toolchain install stable --profile minimal
          rustup target add wasm32-unknown-unknown
          rustc --version
          cargo --version

      - name: Setup rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release

      - name: Install candid-extractor
        run: |
          TMPDIR=$(mktemp -d)
          VERSION="0.1.5"
          BINARY="candid-extractor-x86_64-unknown-linux-gnu.tar.gz"
          wget -P "$TMPDIR" "https://github.com/dfinity/candid-extractor/releases/download/${VERSION}/${BINARY}"
          tar xzf "$TMPDIR/$BINARY" -C "$TMPDIR"
          mkdir -p "$HOME/.local/bin"
          mv "$TMPDIR/candid-extractor" "$HOME/.local/bin/"
          rm -rf "$TMPDIR"
          candid-extractor --version

      - name: Install wasm-opt
        run: |
          TMPDIR=$(mktemp -d)
          VERSION="version_122"
          BINARY="binaryen-$VERSION-x86_64-linux.tar.gz"
          wget -P "$TMPDIR" "https://github.com/WebAssembly/binaryen/releases/download/$VERSION/$BINARY"
          tar xzf "$TMPDIR/$BINARY" -C "$TMPDIR"
          mkdir -p "$HOME/.local/bin"
          mv "$TMPDIR/binaryen-$VERSION/bin/"* "$HOME/.local/bin/"
          rm -rf "$TMPDIR"
          wasm-opt --version

      - name: Build Rust contracts
        run: ./scripts/build-rust.sh

      - name: Create protocol archives
        run: |
          mkdir -p artifacts
          for protocol in $(echo '${{ needs.prepare.outputs.rust_protocol_matrix }}' | jq -r '.[]'); do
            tmp_dir=$(mktemp -d)
            for contract in "contracts/${protocol}"/*; do
              if [ -d "${contract}" ]; then
                find "${contract}/res" -maxdepth 1 -type f -exec cp {} "$tmp_dir" \;
                if [ -d "${contract}/mock/res" ]; then
                  find "${contract}/mock/res" -maxdepth 1 -type f -exec cp {} "$tmp_dir" \;
                fi
              fi
            done
            tar -czf "artifacts/${protocol}.tar.gz" -C "$tmp_dir" .
            rm -rf "$tmp_dir"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-rust
          path: artifacts/*
          retention-days: 2

  build-ethereum:
    name: Build Ethereum
    if: needs.prepare.outputs.build_required == 'true'
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable
      - run: forge --version

      - name: Build Ethereum contracts
        run: ./scripts/build-ethereum.sh

      - name: Create archive
        run: |
          tmp_dir=$(mktemp -d)
          for contract in "contracts/ethereum"/*; do
            if [ -d "${contract}" ]; then
              cp -r "${contract}/out" "$tmp_dir/"
              if [ -d "${contract}/mock/out" ]; then
                cp -r "${contract}/mock/out" "$tmp_dir/mock/"
              fi
            fi
          done
          mkdir -p artifacts
          tar -czf "artifacts/ethereum.tar.gz" -C "$tmp_dir" .
          rm -rf "$tmp_dir"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-ethereum
          path: artifacts/*
          retention-days: 2

  build-zksync:
    name: Build ZKsync
    if: needs.prepare.outputs.build_required == 'true'
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ZKsync Foundry
        run: |
          wget -qc https://github.com/matter-labs/foundry-zksync/releases/download/nightly/foundry_nightly_linux_amd64.tar.gz -O - | tar -xz
          sudo mv ./forge /usr/local/bin/
          forge -V

      - name: Build ZKsync contracts
        run: ./scripts/build-zksync.sh

      - name: Create archive
        run: |
          tmp_dir=$(mktemp -d)
          for contract in "contracts/zksync"/*; do
            if [ -d "${contract}" ]; then
              # Copy the build artifacts from the contract directory
              if [ -d "${contract}/out" ]; then
                cp -r "${contract}/out" "$tmp_dir/$(basename ${contract})/"
              fi
              if [ -d "${contract}/artifacts" ]; then
                cp -r "${contract}/artifacts" "$tmp_dir/$(basename ${contract})/"
              fi
              # Copy mock artifacts if they exist
              if [ -d "${contract}/mock/out" ]; then
                mkdir -p "$tmp_dir/$(basename ${contract})/mock"
                cp -r "${contract}/mock/out" "$tmp_dir/$(basename ${contract})/mock/"
              fi
              if [ -d "${contract}/mock/artifacts" ]; then
                mkdir -p "$tmp_dir/$(basename ${contract})/mock"
                cp -r "${contract}/mock/artifacts" "$tmp_dir/$(basename ${contract})/mock/"
              fi
            fi
          done
          mkdir -p artifacts
          tar -czf "artifacts/zksync.tar.gz" -C "$tmp_dir" .
          rm -rf "$tmp_dir"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-zksync
          path: artifacts/*
          retention-days: 2

  release:
    name: Release
    if: needs.prepare.outputs.release_required == 'true'
    runs-on: ubuntu-latest
    needs: [prepare, build-rust, build-ethereum, build-zksync]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          merge-multiple: true

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: artifacts/*
          file_glob: true
          tag: ${{ needs.prepare.outputs.version }}
          release_name: ${{ needs.prepare.outputs.version }}
          prerelease: ${{ needs.prepare.outputs.prerelease }}
          overwrite: ${{ needs.prepare.outputs.overwrite_release }}
          target_commit: ${{ needs.prepare.outputs.target_commit }}
